    En état d'échec, il faut faire passer un test à la projection de chaque mouvement renvoyé. SI on a 215 mouvements possibles, on ne garde que ceux qui enlève l'état d'échecs. S'il n'y en a aucun, alors c'est échec et mat. 

    Ou vérifier les 3 conditions, ça revient au même et semble moins couteux en processus et en cerveau

    Pour vérifier le check-mate, on doit lancer une projection de nos pièces sur les 8 cases autour du roi, les pièces adverses qui menacent le roi et les potentiels cases qui sépare ces pièces du roi
        - Soit l'une de mes pièces peut s'interposer donc parmi les cases possibles se trouvent le chemin de la pièce menaçante.
        - Soit, une pièce peut tuer la pièce adverse menaçante
        - Soit le roi peut se déplacer dans une safe-zone

        En cas d'échec double (Donc si la case du roi se retrouve deux fois dans le tableau des cases contrôlée adverse, alors on ne vérifie que les déplacement du roi en safe-zone)

        A priori, la seule projection à faire est celle de toutes les pièces ennemis si le roi mange une autre pièce. Il faudra vérifier que cette case (sous la pièce), n'est pas en danger-zone.

est-ce que le roi et les tour ont déjà bougé
roi => echec + déplacement ?

board : [
    case: {
        x: ,
        y: ,
        caseColor: ,
        isPiece, false:
        controlByWhite: false,
        controlByBlack: false,
        piece: {
            name: ,
            id: ,
            color: ,
            isAlive: true,
            canMove: true,
            dangerZone: false,

            PROPRIETE SPECIALE {
                PION.justMoveTwo: false,

            }

            TOUTES LES PROPRIETES DE CETTE PIECE
        }
    }
]

Propriétés de la partie :

gameActive: {
    emptyMoved: 0,
    player1: {
        playerName: ,
        typePlayer: ,
        colorPlayed: ,
        hisTurn: ,
        inCheck: false,
        movedPlayed: ,
        timePlayed: ,
    },
    player2: {
        playerName: ,
        typePlayer: ,
        colorPlayed: ,
        hisTurn: ,
        inCheck: false,
        movedPlayed: ,
        timePlayed: ,
    },
}

game: [
    gameSummary: {
        playerOneName: ,
        playerOneColor: ,
        playerTwoName: ,
        playerTwoColor: ,
    },
    moveX {
        playerColor: ,
        killingmove: false,
        piece: tw1, pb8, (tour white 1; pion black 8);
        origin: ,
        destination: ,
    }
],